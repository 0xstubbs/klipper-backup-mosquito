### UI
[include mainsail.cfg]
#[include timelapse.cfg]

### Control Board
[include klipper-prusa-mk3s/mk3s/einsy-rambo.cfg]

### Base Setup
[include klipper-prusa-mk3s/mk3s/display.cfg]
[include klipper-prusa-mk3s/mk3s/steppers.cfg]
[include klipper-prusa-mk3s/mk3s/tmc2130.cfg]
#[include klipper-prusa-mk3s/mk3s/adxlmcu.cfg]
#[include print_area_bed_mesh.cfg]

### Extrusion
# Extruder
[include klipper-prusa-mk3s/extruders/prusa.cfg]

# Hotend
[include klipper-prusa-mk3s/hotends/v6.cfg]

# Linear Correction
# Check `extruders/linear-correction` for more information
[include klipper-prusa-mk3s/extruders/linear-correction/linear-correction-0.cfg] # Default Prusa linear correction optimized for LDO motors

### Macros
[include klipper-prusa-mk3s/macros.cfg]

#[save_variables]
#filename: ~/printer_data/config/variables.cfg

### First Run
# Execute these sequentially in the console, let PID tuning finish before saving
# PID_CALIBRATE HEATER=extruder TARGET=170
# SAVE_CONFIG
# PID_CALIBRATE HEATER=heater_bed TARGET=60
# SAVE_CONFIG


# Modify printer.cfg to tune acceleration.
[printer]
kinematics: cartesian
max_velocity: 250
max_accel: 7000
max_z_velocity: 15
max_z_accel: 30

[input_shaper]
shaper_freq_x: 48.8
shaper_type_x: zv
shaper_freq_y: 52.0
shaper_type_y: mzv


[probe]
pin: PB4
x_offset: 24
y_offset: 5

speed: 20.0
samples: 4 # Sampling, primarily for bed mesh. 3 is fine for normal PINDA probes.
samples_result: average
sample_retract_dist: .5

[stepper_x]
step_pin: PC0
dir_pin: !PL0
enable_pin: !PA7
microsteps: 16
rotation_distance: 32

endstop_pin: tmc2130_stepper_x:virtual_endstop
position_endstop: 0
position_max: 255
homing_retract_dist: 0 # Distance to back off before homing a second time. Set to 0 to disable.
homing_speed: 50

[tmc2130 stepper_x]
cs_pin: PG0
interpolate: True
stealthchop_threshold: 0

#************************************
#********** X-Motor Current  **********
#V4
run_current: 0.4
hold_current: .4

#V3
#run_current: .35
#hold_current: .35

#run_current: .3480291
#hold_current: .3480291

#V2
# run_current: .3480291
# hold_current: .3480291

#V1
#run_current: .281738
#hold_current: .281738

#************************************

sense_resistor: 0.220
diag1_pin: !PK2
driver_IHOLDDELAY: 8
driver_TPOWERDOWN: 0
driver_TBL: 2
driver_TOFF: 3
driver_HEND: 1
driver_HSTRT: 5
driver_PWM_FREQ: 2
driver_PWM_GRAD: 2
driver_PWM_AMPL: 230
driver_PWM_AUTOSCALE: True
driver_SGT: 3

[stepper_y]
step_pin: PC1
dir_pin: PL1
enable_pin: !PA6
microsteps: 16
rotation_distance: 32
endstop_pin: tmc2130_stepper_y:virtual_endstop
position_max: 212.5
position_min: -4
position_endstop: -4
homing_speed: 50
homing_retract_dist: 0

[tmc2130 stepper_y]
cs_pin: PG2
interpolate: True

#************************************
#********** Y-Motor Current  **********
#V4
run_current: 0.4
hold_current: .4

#V3
#run_current: .35
#hold_current: .35

#run_current: .3480291
#hold_current: .3480291

#V2
# run_current: .3480291
# hold_current: .3480291

#V1
#run_current: .281738
#hold_current: .281738

#Run at the same current as X-axis for lower noise, and to keep steppers cooler.
#This should work, but if Y starts skipping steps, you may need to bump up to Prusa stock.

#************************************

sense_resistor: 0.220
diag1_pin: !PK7
driver_IHOLDDELAY: 8
driver_TPOWERDOWN: 0
driver_TBL: 2
driver_TOFF: 3
driver_HEND: 1
driver_HSTRT: 5
driver_PWM_FREQ: 2
driver_PWM_GRAD: 2
driver_PWM_AMPL: 230
driver_PWM_AUTOSCALE: True
driver_SGT: 3

[stepper_z]
step_pin: PC2
dir_pin: !PL2
enable_pin: !PA5
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 212.5 #This is the MK3S default.
position_min: -2
homing_speed: 13.33

[tmc2130 stepper_z]
cs_pin: PK5
interpolate: True

#************************************
#********** Z-Motor Current  **********
#V3
run_current: .65
hold_current: .65

#V2
#run_current: .65
#hold_current: .65

#V1
#run_current: .53033
#hold_current: .53033

#Run at the same current as X-axis for lower noise, and to keep steppers cooler.
#This should work, but if Y starts skipping steps, you may need to bump up to Prusa stock.

#************************************

sense_resistor: 0.220
diag1_pin: !PK6
driver_IHOLDDELAY: 8
driver_TPOWERDOWN: 0
driver_TBL: 2
driver_TOFF: 3
driver_HEND: 1
driver_HSTRT: 5
driver_PWM_FREQ: 2
driver_PWM_GRAD: 4
driver_PWM_AMPL: 200
driver_PWM_AUTOSCALE: True
driver_SGT: 4

[extruder]
step_pin: PC3
dir_pin: PL6
enable_pin: !PA4
microsteps: 16
rotation_distance: 22.85696
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PE5
max_extrude_only_distance: 102

#PT1000 sensor from Slice Engineering
sensor_type: PT1000
max_temp: 450
min_extrude_temp: 170
control: pid
pid_Kp: 17.619
pid_Ki:0.612
pid_Kd:126.857

pressure_advance: 0.038


[tmc2130 extruder]
cs_pin: PK4
interpolate: True

#******************
# Run Current
#******************
#V2
run_current: 0.52
hold_current: 0.52

#V1
#run_current: .513757
#hold_current: .513757
sense_resistor: 0.220
diag1_pin: !PK3
driver_IHOLDDELAY: 8
driver_TPOWERDOWN: 0
driver_TBL: 2
driver_TOFF: 3
driver_HEND: 1
driver_HSTRT: 5
driver_PWM_FREQ: 2
driver_PWM_GRAD: 4
driver_PWM_AMPL: 240
driver_PWM_AUTOSCALE: True
driver_SGT: 3

[heater_bed]
heater_pin: PG5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PF2
#control: pid
pid_Kp: 58.278
pid_Ki: 0.839
pid_Kd: 1011.848

min_temp: 0
max_temp: 125

# Hot End Fan
[heater_fan nozzle_cooling_fan]
pin: PH5
heater: extruder
heater_temp: 50.0
fan_speed: 1.0

[temperature_sensor einsy_board]
sensor_pin: PF6
sensor_type: TDK NTCG104LH104JT1
min_temp: -10
max_temp: 70

[mcu]
serial: /dev/ttyACM0 #USB Connection
#serial: /dev/serial/by-id/usb-Prusa_Research__prusa3d.com__Original_Prusa_i3_MK3_CZPX2123X004XK23467-if00

[gcode_arcs]
resolution: 0.25

# Part Cooling Fan
[fan]
pin: PH3

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 80

######################################################
###################     Mesh      ####################
######################################################
[bed_mesh]
algorithm: bicubic
fade_end: 10
faulty_region_1_min: 100.583, 187.376
faulty_region_1_max: 122.083, 229.376
faulty_region_2_min: 125.672, -18.124
faulty_region_2_max: 147.172, 23.876
faulty_region_3_min: 192.261, 5.126
faulty_region_3_max: 234.261, 26.626
faulty_region_4_min: 114.422, 39.876
faulty_region_4_max: 135.922, 81.876
faulty_region_5_min: 21.422, 87.126
faulty_region_5_max: 42.922, 129.126
faulty_region_6_min: 54.172, 97.376
faulty_region_6_max: 96.172, 118.876
faulty_region_7_min: 154.172, 97.376
faulty_region_7_max: 196.172, 118.876
faulty_region_8_min: 205.136, 87.126
faulty_region_8_max: 226.636, 129.126
faulty_region_9_min: 114.422, 134.376
faulty_region_9_max: 135.922, 176.376
faulty_region_10_min: 176.177, 191.394
faulty_region_10_max: 218.177, 212.894
horizontal_move_z: 5 #2
mesh_max: 228,210
mesh_min: 24, 6
mesh_pps: 3
probe_count: 6,6
speed: 100
#adaptive_margin: 1

[safe_z_home]
home_xy_position: 153,132
speed: 50.0
z_hop: 10
z_hop_speed: 15.0
move_to_previous: False

# Keeps Debug LED off / not floating
#[static_digital_output debug_led]
#pins: !PB7

[output_pin BEEPER_pin]
pin: PH2
pwm: True
value: 0
shutdown_value:0
cycle_time: 0.001
scale: 1000

[respond]
#default_type: echo
default_type: command
#default_prefix: echo:
#[display_status]
#[pause_resume]

[filament_switch_sensor fsensor]
pause_on_runout: True
runout_gcode:
    M118 Filament Runout Detected
    M600
    PAUSE
insert_gcode:
    M118 Filament Load Detected
    LOAD_FILAMENT
event_delay: 3.0
pause_delay: 0.01
switch_pin: !PK0

# Tools

[skew_correction]

[input_shaper]

[virtual_sdcard]
path: ~/printer_data/gcodes

[display_status]

[pause_resume]

[force_move]
enable_force_move: TRUE



 ######################################################################
# Start Print and End Print
######################################################################

[gcode_macro PRINT_START]
gcode:
  {% set HOTEND = params.HOTEND|int %}
  # {% set BED_TEMP = params.BED_TEMP|int %}
  {% set BED = params.BED|int %}
  
  M104 S{HOTEND}  ;Set extruder temperature
  M140 S{BED}  ;Set bed temperature

  _CHOME  ;Home all axes if not already homed
  G0 Z30  ;Move Up
  PARK_CENTER_REAR  ;Park central rear
  
  M190 S60  ;Set bed temperature and wait
   
  
  ;BED_MESH_CLEAR  #Clear Bed Mesh
  ;BED_MESH_CALIBRATE  ;Adaptive Mesh [Auto]
  M190 S{BED} #Set and wait bed_temp
  M109 S{HOTEND}  ;Set extruder temperature and wait
  G28 Z  ;Home Z axis
  _ADAPTIVE_PURGE  ;Adaptive Purge

[gcode_macro PRINT_END]
gcode:
  M400  ;Clear buffer
  G90  ;Set to absolute positioning
  _MOVE_AWAY  ;Move away from print
  G92 E0   ;Reset extruder
  G1 E-1.5 F1800  ;Retract filament
  TURN_OFF_HEATERS  ;Turn off heaters
  PARK_CENTER_REAR  ;Park central rear
  M84  ;Disable motors
  M190 S55  ;Set bed temperature and wait

 ######################################################################
# 
######################################################################

[gcode_macro _CHOME]
gcode:
  {% if printer["gcode_macro status_homing"] != null %}
    status_homing
  {% endif %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  TRAM_Z
  {% endif %}
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}


[gcode_macro PARK_CENTER_REAR]
gcode:
    {% if printer["gcode_macro status_busy"] != null %}
      status_busy
    {% endif %}
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}

    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  
    {% if printer["gcode_macro status_ready"] != null %}
    status_ready
    {% endif %}


[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% if printer["gcode_macro status_heating"] != null %}
    status_heating
  {% endif %}
    M190.1 { rawparams }
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
#Insane Version 1.1 - 03-Feb-2023
#Based on https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
variable_buffer: 2
 
gcode:
    # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
    {% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %} 
    {% set bed_mesh_min = bedMeshConfig.mesh_min %}
    {% set bed_mesh_max = bedMeshConfig.mesh_max %}
    
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
    
    
    {% if printer["bed_mesh"].profile_name == '' %}
        { action_respond_info("No existing bed mesh found.") }
        {% set last_area_end_x=-1 %}
    {% endif %}

    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

    {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
     
  {% set probeConfig = printer['configfile'].config["probe"] %}
  {% if probeConfig %}
    {% set OffsetX = probeConfig.x_offset|default(0)|float %}
    {% set OffsetY = probeConfig.y_offset|default(0)|float %}
  {% endif %}

	{% set print_min_x = x_min|float %}
	{% set print_min_y = y_min|float %}
	{% set print_max_x = x_max|float %}
	{% set print_max_y = y_max|float %}
    
  {% set mesh_min_x = bed_mesh_min.split(",")[0]|float %}
  {% set mesh_min_y = bed_mesh_min.split(",")[1]|float %}
  {% set mesh_max_x = bed_mesh_max.split(",")[0]|float %}
  {% set mesh_max_y = bed_mesh_max.split(",")[1]|float %}
 
  {% if (print_min_x < mesh_min_x) or (print_max_x > mesh_max_x) or (print_min_y < mesh_min_y) or (print_max_y > mesh_max_y)  %}
        {% set print_min_x = mesh_min_x %}
        {% set print_min_y = mesh_min_y %}
        {% set print_max_x = mesh_max_x %}
        {% set print_max_y = mesh_max_y %}
    {% endif %}
  
  {% if klicky_available %}
        _CheckProbe action=query
        Attach_Probe
    {% elif euclid_available %}
        DEPLOY_PROBE
    {% endif %}
    {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

        {% set minimum_probe_count = 3 %}
        {% set medium_probe_count = 5 %}
 
        {% set probe_count = bedMeshConfig.probe_count.split(",") %}
        {% set probe_count_x = probe_count[0]|int %}
        {% if probe_count.__len__() > 1 %}
            {% set probe_count_y = probe_count[1]|int %}
        {% else %}
            {% set probe_count_y = probe_count_x|int %}
        {% endif %}
        {% set relative_reference_index = bedMeshConfig.relative_reference_index %}



        # If print area X is smaller than 75% of the bed size, change to to 5 probe counts for X instead of the default 
        {% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.75 %}
            {% set probe_count_x = medium_probe_count %}
        {% endif %}

        # If print area Y is smaller than 75% of the bed size, change to to 5 probe counts for Y instead of the default 
        {% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.75 %}
            {% set probe_count_y = medium_probe_count %}
        {% endif %}

        # If print area X is smaller than 50% of the bed size, change to to 3 probe counts for X instead of the default 
        {% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}
            {% set probe_count_x = minimum_probe_count %}
        {% endif %}

        # If print area Y is smaller than 50% of the bed size, change to to 3 probe counts for Y instead of the default 
        {% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}
            {% set probe_count_y = minimum_probe_count %}
        {% endif %}

        {% if print_min_x - buffer >= mesh_min_x %}
            {% set mesh_min_x = print_min_x - buffer %}
        {% endif %}

        {% if print_min_y - buffer >= mesh_min_y %}
            {% set mesh_min_y = print_min_y - buffer %}
        {% endif %}

        {% if print_max_x + buffer <= mesh_max_x %}
            {% set mesh_max_x = print_max_x + buffer %}
        {% endif %}

        {% if print_max_y + buffer <= mesh_max_y %}
            {% set mesh_max_y = print_max_y + buffer %}
        {% endif %}

        { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
        { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
        { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

        {% if printer["gcode_macro status_meshing"] != null %}
            status_meshing
        {% endif %}

        {% if relative_reference_index == 0 or relative_reference_index == null %}
            _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
        {% else %}
            {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
            { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
            _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
        {% endif %}
    {% else %}
        {% if printer["gcode_macro status_meshing"] != null %}
            status_meshing
        {% endif %}
        _BED_MESH_CALIBRATE
    {% endif %}
    {% if klicky_available %}
        Dock_Probe
    {% elif euclid_available %}
        STOW_PROBE
    {% endif %}

  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}

# # # Klipper Adaptive Purging - VoronDesign Logo # # #
# credits: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/main/Configuration/Adaptive_Purge.cfg
# credits: Insane Version 1.1 - 03-Feb-2023

[gcode_macro _ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_tip_distance: 10           # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 15          # Amount of filament to purge
variable_flow_rate: 20              # Desired flow rate in mm3/s
variable_x_default: 5              # X location to purge, overwritten if adaptive is True
variable_y_default: 5              # Y location to purge, overwritten if adaptive is True
variable_size: 25                   # Size of the logo
variable_distance_to_object_x: 30   # Distance in x to the print area
variable_distance_to_object_y: 30   # Distance in y to the print area

gcode:
    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
        
         {% if x_origin < x_default %}
            set x_origin = x_default | float
         {% endif %}
         
         {% if y_origin < y_default %}
            set y_origin = y_default | float
         {% endif %}

    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    
  
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

    G92 E0
    G0 F{travel_speed*5}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+size/2}                                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.789} Y{y_origin+size}                                          # Move to second purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}      # Purge second line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.711} Y{y_origin}                                               # Move to third purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge third line of logo
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}                                                                    # Z hop
    {% if printer["gcode_macro status_printing"] != null %}
        status_printing
    {% endif %}


[gcode_macro _MOVE_AWAY]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
      
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro BEEP_ATTENTION]
gcode:
	{% set V = 0.5 %}
	M300 S440 P200 V{V}
	G4 P200
	M300 S440 P200 V{V}
	G4 P200
	M300 S440 P200 V{V}
	G4 P200
	M300 S440 P200 V{V}
	G4 P200

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    BEEP_ATTENTION


[gcode_macro M601]
gcode:
    PAUSE
    BEEP_ATTENTION

######################################################################
# Log Pressure Advance Value
######################################################################
[gcode_macro LOG_PRESSURE_ADVANCE]
description: Logs the current pressure advance value
gcode:
  { action_respond_info("Pressure Advance (PA): {:.4f}".format(printer.extruder.pressure_advance)) }

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+10}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-10} MAXIMUM={s+15}  ; Wait for bed temp (within 1 degree)
    {% endif %}

######################################################################
# Test Speed
######################################################################

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#This replicates Prusa's calibrate Z funtionality.
[gcode_macro TRAM_Z]
gcode:
    G28
    G1 X125 Y105
    G1 Z210 F1000 #Update with Z height.
    FORCE_MOVE STEPPER=stepper_z Distance=15 Velocity=10
    G28 Z

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*#
#*# [probe]
#*# z_offset = 1.199
#*#
#*# [bed_mesh smooth_plate]
#*# version = 1
#*# points =
#*# 	0.290833, 0.142500, 0.013333, -0.078750
#*# 	0.285000, 0.071667, -0.020000, -0.085000
#*# 	0.200000, 0.084167, -0.000833, -0.068333
#*# 	0.042500, 0.067500, -0.101667, -0.147500
#*# x_count = 4
#*# y_count = 4
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 24.0
#*# max_x = 228.0
#*# min_y = 6.0
#*# max_y = 210.0
#*#
#*# [bed_mesh smooth-plate]
#*# version = 1
#*# points =
#*# 	0.227500, 0.159167, 0.109583, 0.067917, 0.064583, 0.047708, 0.033750
#*# 	0.170417, 0.115000, 0.064583, 0.021146, 0.017083, 0.015417, 0.029167
#*# 	0.176667, 0.107917, 0.040417, 0.014792, 0.008750, 0.034583, 0.042500
#*# 	0.133333, 0.070937, 0.045729, -0.000417, -0.014896, -0.002292, 0.061250
#*# 	0.109583, 0.074583, 0.024583, -0.005313, -0.013333, 0.010000, 0.021250
#*# 	0.028333, 0.078333, 0.041667, 0.005104, 0.009167, -0.000000, -0.001667
#*# 	-0.009167, 0.005000, 0.007917, 0.042500, -0.099583, -0.065417, -0.097083
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 24.0
#*# max_x = 228.0
#*# min_y = 6.0
#*# max_y = 210.0
#*#
#*# [bed_mesh smooooth]
#*# version = 1
#*# points =
#*# 	0.375833, 0.288333, 0.253333, 0.202222, 0.221667, 0.191042, 0.195833
#*# 	0.349583, 0.270000, 0.206667, 0.165104, 0.153333, 0.163750, 0.165000
#*# 	0.346250, 0.260000, 0.190000, 0.147396, 0.145000, 0.153750, 0.163750
#*# 	0.305972, 0.221667, 0.194063, 0.117500, 0.072396, 0.090521, 0.157500
#*# 	0.275417, 0.229167, 0.160417, 0.120625, 0.091250, 0.100833, 0.073333
#*# 	0.274583, 0.264583, 0.190000, 0.127188, 0.110000, 0.070000, 0.044583
#*# 	0.255000, 0.192083, 0.155833, 0.151667, -0.005000, -0.009722, -0.080000
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 24.0
#*# max_x = 228.0
#*# min_y = 6.0
#*# max_y = 210.0
#*#
#*# [bed_mesh textured-pei]
#*# version = 1
#*# points =
#*# 	-0.014583, -0.078333, -0.035833, -0.056806, -0.130833, -0.092917
#*# 	0.175833, 0.160000, 0.061250, 0.071667, 0.042917, 0.002500
#*# 	0.225556, 0.149167, 0.047083, 0.087500, 0.102917, 0.134167
#*# 	0.219861, 0.192917, 0.114167, 0.135417, 0.103750, 0.062917
#*# 	0.152083, 0.152500, 0.097083, 0.146250, 0.092500, -0.045833
#*# 	-0.077500, -0.095833, 0.021944, 0.073333, -0.088056, -0.038333
#*# min_x = 24.0
#*# max_x = 227.95
#*# min_y = 6.0
#*# max_y = 209.95
#*# x_count = 6
#*# y_count = 6
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.003750, 0.002500, 0.026250, -0.003333, -0.081250, -0.124062
#*# 	  0.033750, 0.125625, 0.082500, 0.044375, 0.001250, -0.116875
#*# 	  0.088333, 0.124375, 0.080625, 0.035000, -0.015000, -0.079375
#*# 	  0.070208, 0.092500, 0.051875, 0.036250, -0.011875, -0.095625
#*# 	  -0.073125, 0.026250, -0.003125, -0.010625, -0.070625, -0.166875
#*# 	  -0.193125, -0.061875, -0.067917, -0.060625, -0.175000, -0.254375
#*# x_count = 6
#*# y_count = 6
#*# mesh_x_pps = 3
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 24.0
#*# max_x = 227.95
#*# min_y = 6.0
#*# max_y = 209.95
